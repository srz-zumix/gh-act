on:
  # https://docs.github.com/ja/actions/using-workflows/events-that-trigger-workflows
  branch_protection_rule:
  check_run:
  check_suite:
  create:
  delete:
  deployment:
  deployment_status:
  discussion:
  discussion_comment:
  # dynamic:
  fork:
  gollum:
  issue_comment:
  issues:
  label:
  merge_group:
  milestone:
  page_build:
  project:
  project_card:
  project_column:
  public:
  push:
  pull_request:
    types:
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - opened
      - edited
      - closed
      - reopened
      - synchronize
      - converted_to_draft
      - ready_for_review
      - locked
      - unlocked
      - review_requested
      - review_request_removed
      - auto_merge_enabled
      - auto_merge_disabled
  # pull_request_comment: # -> issue_comment
  pull_request_review:
  pull_request_review_comment:
  pull_request_target:
    types:
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - opened
      - edited
      - closed
      - reopened
      - synchronize
      - converted_to_draft
      - ready_for_review
      - locked
      - unlocked
      - review_requested
      - review_request_removed
      - auto_merge_enabled
      - auto_merge_disabled
  registry_package:
  release:
  repository_dispatch:
    types: [on-demand-test]
  schedule:
    - cron: '0 0 * * 0'
  status:
  watch:
  workflow_call:
    inputs:
      username:
        description: 'Name'
        required: true
        type: string
      tv:
        description: 'true flag'
        type: boolean
        default: true
      fv:
        description: 'false flag'
        type: boolean
        default: false
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      name:
        description: 'Name'
        required: true
      tv:
        description: 'true flag'
        type: boolean
        default: true
      fv:
        description: 'false flag'
        type: boolean
        default: false
  workflow_run:
    workflows: [Lint]
    types:
      - requested
      - completed

name: Event Info
jobs:
  context:
    name: Show Context
    runs-on: ubuntu-latest
    services:
      jenkins:
        image: jenkins/jenkins:latest
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          JAVA_OPTS: -Djenkins.install.runSetupWizard=false -Dcasc.jenkins.config=/casc_configs
        ports:
          - 8080:8080
          - 50000:50000
      agent1:
        image: ubuntu:latest
    steps:
    - name: $github
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "${GITHUB_CONTEXT}"
    - name: $job
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: |
        echo "${JOB_CONTEXT}"
    - name: $runner
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: |
        echo "${RUNNER_CONTEXT}"
    - name: ENV
      run: |
        env
    - name: ENV (GITHUB_)
      run: |
        env | grep GITHUB_ | sort
    - name: Inputs
      env:
        INPUTS_CONTEXT: ${{ toJson(inputs) }}
      run: |
        echo "${INPUTS_CONTEXT}"
    - name: Variables
      env:
        VARS_CONTEXT: ${{ toJson(vars) }}
        TEST_JSON: ${{ vars.TEST_JSON }}
      run: |
        echo "${VARS_CONTEXT}"
    - name: Boolean expression (yes)
      run: |
        echo "${{ inputs.tv }}"
        echo "${{ inputs.tv == true }}"
        echo "${{ inputs.tv != true }}"
        echo "${{ inputs.tv == 'true' }}"
        echo "${{ inputs.tv != 'true' }}"
        echo "${{ inputs.tv == false }}"
        echo "${{ inputs.tv != false }}"
        echo "${{ inputs.tv == 'false' }}"
        echo "${{ inputs.tv != 'false' }}"
    - name: Boolean expression (no)
      run: |
        echo "${{ inputs.fv }}"
        echo "${{ inputs.fv == true }}"
        echo "${{ inputs.fv != true }}"
        echo "${{ inputs.fv == 'true' }}"
        echo "${{ inputs.fv != 'true' }}"
        echo "${{ inputs.fv == false }}"
        echo "${{ inputs.fv != false }}"
        echo "${{ inputs.fv == 'false' }}"
        echo "${{ inputs.fv != 'false' }}"
    - name: Boolean expression (and/or)
      run: |
        echo "${{ (inputs.tv && 'yes') || 'no' }}"
        echo "${{ (inputs.tv == true && 'yes') || 'no' }}"
        echo "${{ (inputs.tv == 'true' && 'yes') || 'no' }}"
