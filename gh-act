#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" &>/dev/null && pwd -P)

GH_ACT_VERSION=0.3

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    EVENT_NAME=
    EVENT_PATH=
    GITHUB_HOSTNAME='github.com'
    AUTO_GITHUB_TOKEN=${GHACT_AUTO_GITHUB_TOKEN:-true}
    ACT_JOB=
    ACT_DRYRUN=false
    ACT_ARTIFACT_SERVER_PATH=
    ACT_DEFAULT_BRANCH=
    WORKFLOWS_PATH=.github/workflows
    CREATE_EVENT_JSON=${GHACT_CREATE_EVENT_JSON:-true}

    # make act_value_opts
    #
    # -a| --actor ) shift ;;
    # --artifact-server-path ) shift ;;
    # --artifact-server-port ) shift ;;
    # --container-architecture ) shift ;;
    # --container-cap-add ) shift ;;
    # --container-cap-drop ) shift ;;
    # --container-daemon-socket ) shift ;;
    # --defaultbranch ) shift ;;
    # -C| --directory ) shift ;;
    # --env ) shift ;;
    # --env-file ) shift ;;
    # -e| --eventpath ) shift ;;
    # --github-instance ) shift ;;
    # -j| --job ) shift ;;
    # -P| --platform ) shift ;;
    # --remote-name ) shift ;;
    # --replace-ghe-action-token-with-github-com ) shift ;;
    # --replace-ghe-action-with-github-com ) shift ;;
    # -s| --secret ) shift ;;
    # --secret-file ) shift ;;
    # --userns ) shift ;;
    # -W| --workflows ) shift ;;

    while :; do
        case "${1-}" in
        -a| --actor ) shift ;;
        --artifact-server-path )
            ACT_ARTIFACT_SERVER_PATH="${2-}"
            shift ;;
        --artifact-server-port ) shift ;;
        --container-architecture ) shift ;;
        --container-cap-add ) shift ;;
        --container-cap-drop ) shift ;;
        --container-daemon-socket ) shift ;;
        --defaultbranch )
            ACT_DEFAULT_BRANCH="${2-}"
            shift ;;
        -C| --directory ) shift ;;
        --env ) shift ;;
        --env-file ) shift ;;
        -e| --eventpath )
            EVENT_PATH="${2-}"
            shift ;;
        --github-instance )
            GITHUB_HOSTNAME="${2-}"
            shift ;;
        -j| --job )
            ACT_JOB="${2-}"
            shift
            ;;
        -P| --platform ) shift ;;
        --remote-name ) shift ;;
        --replace-ghe-action-token-with-github-com ) shift ;;
        --replace-ghe-action-with-github-com ) shift ;;
        -s| --secret )
            if [[ "${2-}" =~ GITHUB_TOKEN ]]; then
                AUTO_GITHUB_TOKEN=false
            fi
            shift
            ;;
        --secret-file ) shift ;;
        --userns ) shift ;;
        -W| --workflows )
            WORKFLOWS_PATH="${2-}"
            shift
            ;;
        -n| --dryrun )
            ACT_DRYRUN=true
            ;;
        --version )
            echo "gh-act version ${GH_ACT_VERSION}"
            CREATE_EVENT_JSON=false
            ;;
        -g| --graph| -h| --help| -l| --list)
            CREATE_EVENT_JSON=false
            ;;
        -?*) ;;
        ?*)
            if [ -z "${EVENT_NAME}" ]; then
                EVENT_NAME="$1"
            fi
            ;;
        *) break ;;
        esac
        shift
    done

    if [ "${GITHUB_HOSTNAME}" = "github.com" ]; then
        GITHUB_API="api.github.com"
    else
        GITHUB_API="${GITHUB_HOSTNAME}/api/v3"
    fi
    if [ -z "${EVENT_NAME}" ]; then
        EVENT_NAME="push"
    fi
    return 0
}

parse_params "$@"

function parts_json {
    TEMPLATE=$(sed -e 's/"/\\"/g' "${SCRIPT_DIR}/templates/parts/$1.json")
    eval "echo -E \"${TEMPLATE}\""

}

function filter_envs {
    sed -e '/^$/d' \
        -e 's/<no value>/null/g' \
        -e "s/\\\\'/'/g" \
        -e 's/\\u000D/\\r/g' \
        -e 's/\\u000A/\\n/g' \
        -e 's/\\u0026/\&/g' \
        -e 's/\\u003C/</g' \
        -e 's/\\u003D/=/g' \
        -e 's/\\u003E/>/g' \
        -e 's/\\/\\\\/g' \
        -e 's/\\"/\\\\\"/g'
}

function is_valid_user {
    gh api --hostname "${GITHUB_HOSTNAME}" -H "Accept: application/vnd.github.v3+json" "/users/$1" >/dev/null 2>/dev/null && :
    return $?
}

function user_json {
    # shellcheck disable=SC2016,SC2086
    USER_JSON_TEMPLATE='{
    "avatar_url": "{{.avatar_url}}",
    "events_url": "{{.events_url}}",
    "followers_url": "{{.followers_url}}",
    "following_url": "{{.following_url}}",
    "gists_url": "{{.gists_url}}",
    "gravatar_id": "{{.gravatar_id}}",
    "html_url": "{{.html_url}}",
    "id": {{printf "%.F" .id}},
    "login": "{{.login}}",
    "node_id": "{{.node_id}}",
    "organizations_url": "{{.organizations_url}}",
    "received_events_url": "{{.received_events_url}}",
    "repos_url": "{{.repos_url}}",
    "site_admin": {{.site_admin}},
    "starred_url": "{{.starred_url}}",
    "subscriptions_url": "{{.subscriptions_url}}",
    "type": "{{.type}}",
    "url": "{{.url}}"
}'
    if is_valid_user "${1}"; then
        gh api --hostname "${GITHUB_HOSTNAME}" -H "Accept: application/vnd.github.v3+json" \
            "/users/$1" --template "${USER_JSON_TEMPLATE}"
    else
        gh api --hostname "${GITHUB_HOSTNAME}" -H "Accept: application/vnd.github.v3+json" \
            "/user" --template "${USER_JSON_TEMPLATE}" || :
    fi
}

function issue_json {
    ISSUE_NUMBER=$1
    parts_json issue
}

function repo_json {
    OWNER="$1"
    REPO="$2"
    REPOSITORY="$1/$2"

    VISIBILITY=public
    if [ "${REPO_IS_PRIVATE}" = "true" ]; then
        VISIBILITY=private
    fi

    OWNER_JSON="$3"

    parts_json repo
}

function repo_envs {
    REPOSITORY="$1"
    PREFIX="$2"
    ACT_ENV="${TEMPFILE_DIR}/.repo.env"
    # shellcheck disable=SC2016
    gh repo view "${GITHUB_HOSTNAME}/${REPOSITORY}" --json \
        createdAt,defaultBranchRef,deleteBranchOnMerge,description,diskUsage,forkCount,hasIssuesEnabled,hasProjectsEnabled,hasWikiEnabled,homepageUrl,id,isArchived,isFork,isPrivate,issues,isTemplate,licenseInfo,mergeCommitAllowed,mirrorUrl,primaryLanguage,pullRequests,pushedAt,rebaseMergeAllowed,repositoryTopics,squashMergeAllowed,sshUrl,stargazerCount,updatedAt,url,watchers \
        --template '
REPO_CREATED_AT="{{.createdAt}}"
REPO_DEFAULT_BRANCH_REF="{{.defaultBranchRef.name}}"
REPO_DELETE_BRANCH_ON_MERGE="{{.deleteBranchOnMerge}}"
REPO_DESCRIPTION="{{.description | js}}"
REPO_DISK_USAGE="{{.diskUsage}}"
REPO_FORK_COUNT="{{.forkCount}}"
REPO_HAS_ISSUES_ENABLED="{{.hasIssuesEnabled}}"
REPO_HAS_PROJECTS_ENABLED="{{.hasProjectsEnabled}}"
REPO_HAS_WIKI_ENABLED="{{.hasWikiEnabled}}"
REPO_HOMEPAGE_URL="{{if .homepageUrl}}{{.homepageUrl}}{{else}}null{{end}}"
REPO_IS_ARCHIVED="{{.isArchived}}"
REPO_IS_FORK="{{.isFork}}"
REPO_IS_PRIVATE="{{.isPrivate}}"
REPO_ISSUES_TOTAL_COUNT="{{.issues.totalCount}}"
REPO_IS_TEMPLATE="{{.isTemplate}}"
REPO_LICENSE_INFO_KEY="{{if .licenseInfo}}{{.licenseInfo.key}}{{else}}null{{end}}"
REPO_LICENSE_INFO_NAME="{{if .licenseInfo}}{{.licenseInfo.name}}{{else}}null{{end}}"
REPO_MERGE_COMMIT_ALLOWED="{{.mergeCommitAllowed}}"
REPO_MIRROR_URL="{{if .mirrorUrl}}{{.mirrorUrl}}{{else}}null{{end}}"
REPO_NODE_ID="{{.id}}"
REPO_PRIMARY_LANGUAGE="{{if .primaryLanguage}}{{.primaryLanguage.name}}{{else}}null{{end}}"
REPO_PULL_REQUESTS_TOTAL_COUNT="{{.pullRequests.totalCount}}"
REPO_PUSHED_AT="{{.pushedAt}}"
REPO_REBASE_MERGE_ALLOWED="{{.rebaseMergeAllowed}}"
REPO_REPOSITORY_TOPICS="{{if .repositoryTopics}}{{range $index, $element := .repositoryTopics}}{{$element.name}} {{end -}}{{else}}null{{end}}"
REPO_SQUASH_MERGE_ALLOWED="{{.squashMergeAllowed}}"
REPO_SSH_URL="{{.sshUrl}}"
REPO_STARGAZER_COUNT="{{.stargazerCount}}"
REPO_UPDATED_AT="{{.updatedAt}}"
REPO_URL="{{.url}}"
REPO_WATCHERS_TOTAL_COUNT="{{.watchers.totalCount}}"
' | filter_envs > "${ACT_ENV}"
    . "${ACT_ENV}"
    sed -e "s/^/${PREFIX}_/g" < "${ACT_ENV}" > "${ACT_ENV}.${PREFIX}"
    . "${ACT_ENV}.${PREFIX}"
}

function pr_envs {
    ACT_ENV="${TEMPFILE_DIR}/.pull_request.env"
    # shellcheck disable=SC2016,SC2086
    gh pr view ${1:-} --json \
        additions,baseRefName,body,closedAt,comments,commits,createdAt,deletions,files,headRefName,headRepositoryOwner,headRepository,id,isDraft,maintainerCanModify,mergedAt,mergedBy,milestone,number,reviews,state,title,updatedAt,url \
        --template '
PR_ADDITIONS="{{.additions}}"
BASE_REF="{{.baseRefName}}"
PR_BODY="{{.body | js}}"
PR_CLOSED_AT="{{.closedAt}}"
PR_COMMENTS="{{ len .comments}}"
PR_COMMITS="{{ len .commits}}"
PR_CREATED_AT="{{.createdAt}}"
PR_DELETIONS="{{.deletions}}"
PR_CHANGED_FILES="{{ len .files}}"
HEAD_REF="{{.headRefName}}"
HEAD_OWNER="{{.headRepositoryOwner.login}}"
HEAD_REPO="{{.headRepository.name}}"
PR_IS_DRAFT="{{.isDraft}}"
PR_NODE_ID="{{.id}}"
PR_MAINTAINER_CAN_MODIFY="{{.maintainerCanModify}}"
PR_MERGED_AT="{{.mergedAt}}"
PR_MERGED_BY="{{.mergedBy}}"
PR_MILESTONE="{{.milestone}}"
PR_NUMBER="{{.number}}"
PR_POTENTIAL_MERGE_COMMIT="{{.potentialMergeCommit.oid}}"
PR_REVIEWS="{{ len .reviews}}"
PR_STATE="{{.state}}"
PR_TITLE="{{.title | js}}"
PR_UPDATED_AT="{{.updatedAt}}"
PR_URL="{{.url}}"
' | filter_envs > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function pr_review_envs {
    # FIXME: PR_REVIEW_ID
    ACT_ENV="${TEMPFILE_DIR}/.pull_request_review.env"
    # shellcheck disable=SC2016,SC2086
    gh pr view ${1:-} --json \
        reviews \
        --template '
{{$last := 0}}
{{range $index, $element := .reviews}}{{$last = $index}}{{end}}
{{$last_review := index .reviews $last}}
PR_REVIEW_ID=0
PR_REVIEW_USER="{{$last_review.author.login}}"
PR_REVIEW_BODY="{{$last_review.body | js}}"
PR_REVIEW_AUTHOR_ASSOCIATION="{{$last_review.authorAssociation}}"
PR_REVIEW_SUBMITTED_AT="{{$last_review.submittedAt}}"
PR_REVIEW_STATE="{{$last_review.state}}"
' | filter_envs > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function pr_review_comment_envs() {
    ACT_ENV="${TEMPFILE_DIR}/.pull_request_review_comment.env"
    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F number="$3" -F query='
query($owner: String!, $repo: String!, $number: Int!) {
    repository(owner: $owner, name: $repo) {
        pullRequest(number: $number) {
            reviews(first: 1) {
                nodes {
                    comments(first: 1) {
                        nodes {
                            author { login }
                            authorAssociation
                            body
                            commit { oid }
                            createdAt
                            databaseId
                            diffHunk
                            id
                            originalCommit { oid }
                            originalPosition
                            path
                            position
                            pullRequestReview { databaseId }
                            reactionGroups { 
                                content
                                users { totalCount }
                            }
                            updatedAt
                            url
                        }
                    }
                }
            }
        }
    }
}
' --template '
{{ $review := index .data.repository.pullRequest.reviews.nodes 0 }}
{{ $comment := index $review.comments.nodes 0 }}
PR_REVIEW_COMMENT_AUTHOR="{{ $comment.author.login }}"
PR_REVIEW_COMMENT_AUTHOR_ASSOCIATION="{{ $comment.authorAssociation }}"
PR_REVIEW_COMMENT_BODY="{{ $comment.body | js }}"
PR_REVIEW_COMMENT_COMMIT_ID="{{ $comment.commit.oid }}"
PR_REVIEW_COMMENT_CREATED_AT="{{ $comment.createdAt }}"
PR_REVIEW_COMMENT_ID="{{ printf "%.F" $comment.databaseId }}"
PR_REVIEW_COMMENT_DIFF_HUNK="{{ $comment.diffHunk | js }}"
PR_REVIEW_COMMENT_NODE_ID="{{ $comment.id }}"
PR_REVIEW_COMMENT_ORIGINAL_COMMIT_ID="{{ $comment.originalCommit.oid }}"
PR_REVIEW_COMMENT_ORIGINAL_POSITION="{{ $comment.originalPosition }}"
PR_REVIEW_COMMENT_PATH="{{ $comment.path }}"
PR_REVIEW_COMMENT_PULL_REQUEST_REVIEW_ID="{{ printf "%.F" $comment.pullRequestReview.databaseId }}"
PR_REVIEW_COMMENT_POSITION="{{ $comment.position }}"
PR_REVIEW_COMMENT_UPDATED_AT="{{ $comment.updatedAt }}"
PR_REVIEW_COMMENT_URL="{{ $comment.url }}"
{{range $index, $element := $comment.reactionGroups}}PR_REVIEW_COMMENT_REACTION_{{$element.content}}_COUNT={{println $element.users.totalCount}}{{end}}
PR_REVIEW_COMMENT_REACTION_TOTAL_COUNT=$((0{{range $index, $element := $comment.reactionGroups}}+{{$element.users.totalCount}}{{end}}))
' | filter_envs > "${ACT_ENV}"
        . "${ACT_ENV}"
    PR_REVIEW_COMMENT_AUTHOR_JSON=$(user_json "${PR_REVIEW_COMMENT_AUTHOR}")
}

function pull_request_event_envs() {
    # configurable vars
    # GHACT_PULL_REQUEST_SPEC
    # GHACT_PULL_REQUEST_NUMBER
    PULL_REQUEST_SPEC="${GHACT_BRANCH:-}"
    if [ -n "${GHACT_PULL_REQUEST_SPEC:-}" ]; then
        PULL_REQUEST_SPEC="${GHACT_PULL_REQUEST_SPEC}"
    fi
    if [ -n "${GHACT_PULL_REQUEST_NUMBER:-}" ]; then
        PULL_REQUEST_SPEC="${GHACT_PULL_REQUEST_NUMBER}"
    fi

    pr_envs "${PULL_REQUEST_SPEC}"
    # shellcheck disable=SC2086
    HEAD=$(gh pr view ${PULL_REQUEST_SPEC} --json commits --jq .commits[].oid | tail -1)
    # shellcheck disable=SC2086
    HEAD_USER=$(gh pr view ${PULL_REQUEST_SPEC} --json commits --jq .commits[].authors[].login | tail -1)
    # shellcheck disable=SC2086
    BEFORE=$(gh pr view ${PULL_REQUEST_SPEC} --json commits --jq .commits[].oid | tail -2 | head -1)

    # base
    repo_envs "${OWNER}/${REPO}" "BASE"
    BASE_USER_JSON=$(user_json "${OWNER}")
    BASE_REPO_JSON=$(repo_json "${OWNER}" "${REPO}" "${BASE_USER_JSON}")
    BASE_SHA=$(gh api --hostname "${GITHUB_HOSTNAME}" --method GET -H "Accept: application/vnd.github.v3+json" "/repos/${OWNER}/${REPO}/git/refs/heads/${BASE_REF}" --jq .object.sha)

    if [[ "${EVENT_NAME}" =~ .*review.* ]]; then
        if [ "${PR_REVIEWS}" == "0" ]; then
            PR_REVIEW_ID=0
            PR_REVIEW_USER="${HEAD_USER}"
            PR_REVIEW_BODY="gh-act review"
            PR_REVIEW_AUTHOR_ASSOCIATION="OWNER"
            PR_REVIEW_SUBMITTED_AT="${PR_UPDATED_AT}"
            PR_REVIEW_STATE="COMMENTED"
        else
            pr_review_envs "${PULL_REQUEST_SPEC}"
        fi
        PR_REVIEW_USER_JSON=$(user_json "${PR_REVIEW_USER}")
    fi
    if [[ "${EVENT_NAME}" =~ .*comment.* ]]; then
        pr_review_comment_envs "${OWNER}" "${REPO}" "${PR_NUMBER}"
    fi
}


function issue_envs {
    ACT_ENV="${TEMPFILE_DIR}/.issue.env"
    # shellcheck disable=SC2016
    gh issue view "$1" --json \
        author,assignees,body,closedAt,comments,createdAt,id,reactionGroups,state,title,updatedAt,url \
        --template '
ISSUE_AUTHOR="{{.author.login}}"
ISSUE_ASSIGNEE="{{if (len .assignees)}}{{(index .assignees 0).login}}{{end}}"
ISSUE_ASSIGNEES="{{range $index, $element := .assignees}}{{$element.login -}} {{end}}"
ISSUE_BODY="{{.body | js}}"
ISSUE_CLOSED_AT="{{if .closedAt}}{{.closedAt}}{{else}}null{{end}}"
ISSUE_COMMENTS="{{ len .comments}}"
ISSUE_CREATED_AT="{{.createdAt}}"
ISSUE_NODE_ID="{{.id}}"
ISSUE_STATE="{{.state}}"
ISSUE_TITLE="{{.title}}"
ISSUE_UPDATED_AT="{{.updatedAt}}"
ISSUE_URL="{{.url}}"
{{range $index, $element := .reactionGroups}}ISSUE_REACTION_{{$element.content}}_COUNT={{println $element.users.totalCount}}{{end}}
ISSUE_REACTION_TOTAL_COUNT=$((0{{range $index, $element := .reactionGroups}}+{{$element.users.totalCount}}{{end}}))
' | filter_envs > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function issue_comment_envs {
    ACT_ENV="${TEMPFILE_DIR}/.issue.comment.env"
    # shellcheck disable=SC2016
    gh issue view "$1" --json \
        comments \
        --template '
{{$comment := index .comments 0}}
ISSUE_COMMENT_ID=0
ISSUE_COMMENT_AUTHOR="{{$comment.author.login}}"
ISSUE_COMMENT_AUTHOR_ASSOCIATION="{{$comment.authorAssociation}}"
ISSUE_COMMENT_BODY="{{$comment.body | js}}"
ISSUE_COMMENT_CREATED_AT="{{$comment.createdAt}}"
ISSUE_COMMENT_UPDATED_AT="{{$comment.createdAt}}"
{{range $index, $element := $comment.reactionGroups}}ISSUE_COMMENT_REACTION_{{$element.content}}_COUNT={{println $element.users.totalCount}}{{end}}
ISSUE_COMMENT_REACTION_TOTAL_COUNT=$((0{{range $index, $element := $comment.reactionGroups}}+{{$element.users.totalCount}}{{end}}))
' | filter_envs > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function issue_event_envs() {
    # configurable vars
    # GHACT_ISSUE_NUMBER
    if [ -z "${GHACT_ISSUE_NUMBER:-}" ]; then
        GHACT_ISSUE_NUMBER=$(gh issue list --json number --jq .[].number | head -1)
    fi

    issue_envs "${GHACT_ISSUE_NUMBER}"

    ISSUE_LABELS=$(gh issue view "${GHACT_ISSUE_NUMBER}" --json labels)
    ISSUE_LABELS=${ISSUE_LABELS#{}
    ISSUE_LABELS=${ISSUE_LABELS%\}}

    if [ -n "${ISSUE_ASSIGNEE}" ]; then
        ASSIGNEE_USER_JSON=$(user_json "${ISSUE_ASSIGNEE}")
    fi
    if [ -n "${ISSUE_ASSIGNEES}" ]; then
        for assignee in ${ISSUE_ASSIGNEES}; do
            if [ -n "${ASSIGNEES_JSON:-}" ]; then
                ASSIGNEES_JSON+=","
            fi
            ASSIGNEES_JSON+=$(user_json "${assignee}")
        done
    fi

    if [[ "${EVENT_NAME}" =~ .*comment.* ]]; then
        if [ "${ISSUE_COMMENTS}" == "0" ]; then
            ISSUE_COMMENT_ID=0
            ISSUE_COMMENT_AUTHOR="${ISSUE_AUTHOR}"
            ISSUE_COMMENT_AUTHOR_ASSOCIATION="OWNER"
            ISSUE_COMMENT_BODY="gh-act issue comment body"
            ISSUE_COMMENT_CREATED_AT="${ISSUE_CREATED_AT}"
            ISSUE_COMMENT_UPDATED_AT="${ISSUE_UPDATED_AT}"
        else
            issue_comment_envs "${GHACT_ISSUE_NUMBER}"
        fi
        ISSUE_COMMENT_USER_JSON=$(user_json "${ISSUE_COMMENT_AUTHOR}")
    fi
    HEAD_OWNER="${OWNER}"
    HEAD_REPO="${REPO}"
    HEAD_USER="${ISSUE_AUTHOR}"
}


function branch_protection_rule_envs() {
    ACT_ENV="${TEMPFILE_DIR}/.branch_protection_rule.env"
    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F query='
query($owner: String!, $repo: String!) {
    repository(owner: $owner, name: $repo) {
        branchProtectionRules(last: 1) {
            nodes {
                allowsDeletions
                blocksCreations
                bypassForcePushAllowances(first: 1) { totalCount }
                creator { login }
                databaseId
                dismissesStaleReviews
                isAdminEnforced
                pattern
                repository { databaseId }
                requiredApprovingReviewCount
                requiredStatusChecks { context }
                requiresApprovingReviews
                requiresCodeOwnerReviews
                requiresCommitSignatures
                requiresConversationResolution
                requiresLinearHistory
                requiresStatusChecks
                requiresStrictStatusChecks
            }
        }
    }
}
' --template '
{{$rule := index .data.repository.branchProtectionRules.nodes 0 }}
#BRANCH_PROTECTION_RULE_="{{ $rule.blocksCreations }}"
BRANCH_PROTECTION_RULE_ALLOW_DELETIONS_ENFORCEMENT_LEVEL="{{if $rule.allowsDeletions}}on{{else}}off{{end}}"
BRANCH_PROTECTION_RULE_CREATE_PROTECTED="{{ $rule.blocksCreations }}"
BRANCH_PROTECTION_RULE_CREATOR="{{ $rule.creator.login }}"
BRANCH_PROTECTION_RULE_ID="{{ printf "%.F" $rule.databaseId }}"
BRANCH_PROTECTION_RULE_DISMISS_STALE_REVIEWS_ON_PUSH="{{ $rule.dismissesStaleReviews }}"
BRANCH_PROTECTION_RULE_IS_ADMIN_ENFORCED="{{ $rule.isAdminEnforced }}"
BRANCH_PROTECTION_RULE_PATTERN="{{ $rule.pattern }}"
BRANCH_PROTECTION_RULE_REPOSITORY_ID="{{ printf "%.F" $rule.repository.databaseId }}"
BRANCH_PROTECTION_RULE_REQUIRED_APPROVING_REVIEW_COUNT="{{ $rule.requiredApprovingReviewCount }}"
BRANCH_PROTECTION_RULE_REQUIRED_STATUS_CHECKS='\''[{{range $index, $element := $rule.requiredStatusChecks}}{{ if $index }},{{end}}"{{ $element.context }}"{{end}}]'\''
BRANCH_PROTECTION_RULE_REQUIRE_CODE_OWNER_REVIEW="{{ $rule.requiresCodeOwnerReviews }}"
BRANCH_PROTECTION_RULE_SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL="{{if $rule.requiresCommitSignatures}}on{{else}}off{{end}}"
BRANCH_PROTECTION_RULE_REQUIRED_CONVERSATION_RESOLUTION_LEVEL="{{if $rule.requiresConversationResolution}}on{{else}}off{{end}}"
BRANCH_PROTECTION_RULE_REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL="{{if $rule.requiresStatusChecks}}admins{{else}}non_admins{{end}}"
BRANCH_PROTECTION_RULE_STRICT_REQUIRED_STATUS_CHECKS_POLICY="{{ $rule.requiresStrictStatusChecks }}"
BRANCH_PROTECTION_RULE_LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL="{{if $rule.requiresLinearHistory}}on{{else}}off{{end}}"
#BRANCH_PROTECTION_RULE_="{{if $rule.requiresLinearHistory}}on{{else}}off{{end}}"
#BRANCH_PROTECTION_RULE_="{{ $rule.activeLockReason }}"
' | filter_envs > "${ACT_ENV}"
        . "${ACT_ENV}"
}


function label_event_envs() {
    LABEL_COUNT=$(gh label list --json name --jq length)
    if [ "${LABEL_COUNT}" == "0" ]; then
        LABEL_COLOR="d73a4a"
        LABEL_DESCRIPTION="gh-act label"
        LABEL_NODE_ID=""
        LABEL_IS_DEFAULT="false"
        LABEL_NAME="gh act"
        LABEL_URL="https://${GITHUB_API}/repos/${OWNER}/${REPO}/labels/gh%20act"
    else
        ACT_ENV="${TEMPFILE_DIR}/.label.env"
        # shellcheck disable=SC2016
        gh label list --json \
            color,description,id,isDefault,name,url \
            --template '
{{$last := 0}}
{{range $index, $element := .}}{{$last = $index}}{{end}}
{{$label := index . $last}}
LABEL_COLOR="{{$label.color}}"
LABEL_DESCRIPTION="{{$label.description | js}}"
LABEL_NODE_ID="{{$label.id}}"
LABEL_IS_DEFAULT="{{$label.isDefault}}"
LABEL_NAME="{{$label.name}}"
LABEL_URL="{{$label.url}}"
' | filter_envs > "${ACT_ENV}"
        . "${ACT_ENV}"
    fi
}


function discussion_envs() {
    ACT_ENV="${TEMPFILE_DIR}/.discussion.env"
    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F number="$3" -F query='
query($owner: String!, $repo: String!, $number: Int!) {
    repository(owner: $owner, name: $repo) {
        discussion(number: $number) {
            activeLockReason
            answerChosenAt
            answerChosenBy { login }
            author { login }
            authorAssociation
            body
            category {
                createdAt
                description
                emoji
                id
                isAnswerable
                name
                slug
                repository { id }
                updatedAt
            }
            comments { totalCount }
            createdAt
            databaseId
            id
            locked
            number
            reactionGroups {
                content
                reactors { totalCount }
            }
            title
            updatedAt
            url
        }
    }
}
' --template '
{{$disscussion := .data.repository.discussion }}
DISCUSSION_ID="{{ printf "%.F" $disscussion.databaseId }}"
DISCUSSION_ACTIVE_LOCK_REASON="{{ $disscussion.activeLockReason }}"
DISCUSSION_ANSWER_CHOSEN_AT="{{ $disscussion.answerChosenAt }}"
DISCUSSION_ANSWER_CHOSEN_BY="{{ $disscussion.answerChosenBy }}"
DISCUSSION_AUTHOR="{{ $disscussion.author.login }}"
DISCUSSION_AUTHOR_ASSOCIATION="{{ $disscussion.authorAssociation }}"
DISCUSSION_BODY="{{ $disscussion.body | js }}"
DISCUSSION_CATEGORY_CREATED_AT="{{ $disscussion.category.createdAt }}"
DISCUSSION_CATEGORY_DESCRIPTION="{{ $disscussion.category.description | js }}"
DISCUSSION_CATEGORY_EMOJI="{{ $disscussion.category.emoji }}"
DISCUSSION_CATEGORY_IS_ANSWERABLE="{{ $disscussion.category.isAnswerable }}"
DISCUSSION_CATEGORY_NAME="{{ $disscussion.category.name }}"
DISCUSSION_CATEGORY_NODE_ID="{{ $disscussion.category.id }}"
DISCUSSION_CATEGORY_REPOSITORY_ID="{{ $disscussion.category.repository.id }}"
DISCUSSION_CATEGORY_SLUG="{{ $disscussion.category.slug }}"
DISCUSSION_CATEGORY_UPDATED_AT="{{ $disscussion.category.updatedAt }}"
DISCUSSION_COMMENTS_TOTAL_COUNT="{{ $disscussion.comments.totalCount }}"
DISCUSSION_CREATED_AT="{{ $disscussion.createdAt }}"
DISCUSSION_HTML_URL="{{ $disscussion.url }}"
DISCUSSION_LOCKED="{{ $disscussion.locked }}"
DISCUSSION_NODE_ID="{{ $disscussion.id }}"
DISCUSSION_NUMBER="{{ $disscussion.number }}"
DISCUSSION_TITLE="{{ $disscussion.title | js }}"
DISCUSSION_UPDATED_AT="{{ $disscussion.updatedAt }}"
{{range $index, $element := $disscussion.reactionGroups}}DISCUSSION_REACTION_{{$element.content}}_COUNT={{println $element.reactors.totalCount}}{{end}}
DISCUSSION_REACTION_TOTAL_COUNT=$((0{{range $index, $element := $disscussion.reactionGroups}}+{{$element.reactors.totalCount}}{{end}}))
' | filter_envs > "${ACT_ENV}"
        . "${ACT_ENV}"
}


function discussion_comment_envs {
    ACT_ENV="${TEMPFILE_DIR}/.discussion.comment.env"
    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F number="$3" -F query='
query($owner: String!, $repo: String!, $number: Int!) {
    repository(owner: $owner, name: $repo) {
        discussion(number: $number) {
            comments(last: 1) {
                nodes {
                    author { login }
                    authorAssociation
                    body
                    databaseId
                    discussion { databaseId }
                    id
                    reactionGroups {
                        content
                        reactors { totalCount }
                    }
                    replies { totalCount }
                    updatedAt
                    url
                }
            }
        }
    }
}
' --template '
{{$disscussion := .data.repository.discussion }}
{{$comment := index $disscussion.comments.nodes 0 }}
DISCUSSION_COMMENT_ID="{{ printf "%.F" $comment.databaseId }}"
DISCUSSION_COMMENT_AUTHOR="{{ $comment.author.login }}"
DISCUSSION_COMMENT_AUTHOR_ASSOCIATION="{{ $comment.authorAssociation }}"
DISCUSSION_COMMENT_BODY="{{ $comment.body | js }}"
DISCUSSION_COMMENT_CREATED_AT="{{ $comment.createdAt }}"
DISCUSSION_COMMENT_DISCUSSION_ID="{{ printf "%.F" $comment.discussion.databaseId }}"
DISCUSSION_COMMENT_HTML_URL="{{ $comment.url }}"
DISCUSSION_COMMENT_NODE_ID="{{ $comment.id }}"
DISCUSSION_COMMENT_CHILD_COMMENT_COUNT="{{ $comment.replies.totalCount }}"
DISCUSSION_COMMENT_UPDATED_AT="{{ $comment.updatedAt }}"
{{range $index, $element := $comment.reactionGroups}}DISCUSSION_COMMENT_REACTION_{{$element.content}}_COUNT={{println $element.reactors.totalCount}}{{end}}
DISCUSSION_COMMENT_REACTION_TOTAL_COUNT=$((0{{range $index, $element := $comment.reactionGroups}}+{{$element.reactors.totalCount}}{{end}}))
' | filter_envs > "${ACT_ENV}"
        . "${ACT_ENV}"
}


function discussion_event_envs() {
    # configurable vars
    # GHACT_DISCUSSION_NUMBER
    if [ -z "${GHACT_DISCUSSION_NUMBER:-}" ]; then
        # shellcheck disable=SC2016
        GHACT_DISCUSSION_NUMBER=$(
            gh api graphql -F owner="${OWNER}" -F repo="${REPO}" -F query='
query($owner: String!, $repo: String!) {
    repository(owner: $owner, name: $repo) {
        discussions(last: 1) {
            nodes { number }
        }
    }
}' --template '{{$milestone := index .data.repository.discussions.nodes 0 }}{{$milestone.number}}'
        )
    fi

    discussion_envs "${OWNER}" "${REPO}" "${GHACT_DISCUSSION_NUMBER}"
    DISCUSSION_AUTHOR_JSON=$(user_json "${DISCUSSION_AUTHOR}")

    if [[ "${EVENT_NAME}" =~ .*comment.* ]]; then
        if [ "${DISCUSSION_COMMENTS_TOTAL_COUNT}" == "0" ]; then
            DISCUSSION_COMMENT_ID=0
            DISCUSSION_COMMENT_AUTHOR_ASSOCIATION="${DISCUSSION_AUTHOR_ASSOCIATION}"
            DISCUSSION_COMMENT_BODY="gh-act discussion comment body"
            DISCUSSION_COMMENT_CREATED_AT="${DISCUSSION_CREATED_AT}"
            DISCUSSION_COMMENT_DISCUSSION_ID="0"
            DISCUSSION_COMMENT_HTML_URL="${DISCUSSION_HTML_URL}"
            DISCUSSION_COMMENT_NODE_ID=""
            DISCUSSION_COMMENT_CHILD_COMMENT_COUNT="0"
            DISCUSSION_COMMENT_REPLAY_TO_ID="0"
            DISCUSSION_COMMENT_UPDATED_AT="${DISCUSSION_UPDATED_AT}"
        else
            discussion_comment_envs "${OWNER}" "${REPO}" "${GHACT_DISCUSSION_NUMBER}"
        fi
        DISCUSSION_COMMENT_AUTHOR_JSON=$(user_json "${DISCUSSION_COMMENT_AUTHOR}")
    fi
    HEAD_OWNER="${OWNER}"
    HEAD_REPO="${REPO}"
    HEAD_USER="${DISCUSSION_AUTHOR}"
}

function milestone_envs() {
    # configurable vars
    # GHACT_MILESTONE_NUMBER
    if [ -z "${GHACT_MILESTONE_NUMBER:-}" ]; then
        # shellcheck disable=SC2016
        GHACT_MILESTONE_NUMBER=$(
            gh api graphql -F owner="$1" -F repo="$2" -F query='
query($owner: String!, $repo: String!) {
    repository(owner: $owner, name: $repo) {
        milestones(last: 1) {
            nodes { number }
        }
    }
}' --template '{{$milestone := index .data.repository.milestones.nodes 0 }}{{$milestone.number}}'
        )
    fi

    ACT_ENV="${TEMPFILE_DIR}/.milestone.env"
    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F number="${GHACT_MILESTONE_NUMBER}" -F query='
query($owner: String!, $repo: String!, $number: Int!) {
    repository(owner: $owner, name: $repo) {
        milestone(number: $number) {
            closedAt
            issues(states: CLOSED) {
                totalCount
            }
            createdAt
            creator { login }
            description
            dueOn
            id
            number
            state
            title
            updatedAt
            url
        }
    }
}
' --template '
{{$milestone := .data.repository.milestone }}
MILESTONE_ID=0
MILESTONE_CLOSED_AT="{{ $milestone.closedAt }}"
MILESTONE_CLOSED_ISSUES="{{ $milestone.issues.totalCount }}"
MILESTONE_CREATED_AT="{{ $milestone.locked }}"
MILESTONE_CREATOR_AUTHOR="{{ $milestone.creator.login }}"
MILESTONE_DESCRIPTION="{{ $milestone.description }}"
MILESTONE_DUE_ON="{{ $milestone.dueOn }}"
MILESTONE_NODE_ID="{{ $milestone.id }}"
MILESTONE_NUMBER="{{ $milestone.number }}"
MILESTONE_STATE="{{ $milestone.state }}"
MILESTONE_TITLE="{{ $milestone.title }}"
MILESTONE_UPDATED_AT="{{ $milestone.locked }}"
MILESTONE_HTML_URL="{{ $milestone.url }}"
' | filter_envs > "${ACT_ENV}"

    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F number="${GHACT_MILESTONE_NUMBER}" -F query='
query($owner: String!, $repo: String!, $number: Int!) {
    repository(owner: $owner, name: $repo) {
        milestone(number: $number) {
            issues(states: OPEN) {
                totalCount
            }
        }
    }
}
' --template '
{{$milestone := .data.repository.milestone }}
MILESTONE_OPEN_ISSUES="{{ $milestone.issues.totalCount }}"
' | filter_envs >> "${ACT_ENV}"
        . "${ACT_ENV}"
}

function milestone_event_envs() {
    milestone_envs "${OWNER}" "${REPO}"
    MILESTONE_CREATOR_AUTHOR_JSON=$(user_json "${MILESTONE_CREATOR_AUTHOR}")

    HEAD_OWNER="${OWNER}"
    HEAD_REPO="${REPO}"
    HEAD_USER="${MILESTONE_CREATOR_AUTHOR}"
}

function check_envs() {
    CHECK_APP_JSON=$(cat "${SCRIPT_DIR}/templates/app/circleci.json")
    CHECK_SUITE_ID=0
    CHECK_RUN_ID=0
}

function package_envs() {
    JQ_FILTER="[.[] | select(.repository.name == \"$2\")][0]"
    if [ -n "${GHACT_PACKAGE_NAME:-}" ]; then
        JQ_FILTER=".[] | select(.name == \"${GHACT_PACKAGE_NAME}\")"
    fi
    if is_valid_user "${1}"; then
        REGISTRY_PACKAGE_JSON=$(gh api --hostname "${GITHUB_HOSTNAME}" \
            -H "Accept: application/vnd.github+json" \
            "/users/$1/packages?package_type=${GHACT_PACKAGE_TYPE:-container}" --jq "${JQ_FILTER}")
    else
        REGISTRY_PACKAGE_JSON=$(gh api --hostname "${GITHUB_HOSTNAME}" \
            -H "Accept: application/vnd.github+json" \
            "/orgs/$1/packages?package_type=${GHACT_PACKAGE_TYPE:-container}" --jq "${JQ_FILTER}")
    fi
}

function release_envs() {
    # configurable vars
    # GHACT_RELEASE_NAME
    if [ -z "${GHACT_RELEASE_NAME:-}" ]; then
        # shellcheck disable=SC2016
        GHACT_RELEASE_NAME=$(gh release list -L 1 --exclude-drafts | grep -o "^\S*")
    fi

    ACT_ENV="${TEMPFILE_DIR}/.release.env"
    # shellcheck disable=SC2016
    gh release view "${GHACT_RELEASE_NAME}" --json \
        apiUrl,author,body,createdAt,id,isDraft,isPrerelease,name,publishedAt,tagName,tarballUrl,targetCommitish,uploadUrl,url,zipballUrl \
        --template '
RELEASE_URL="{{.apiUrl}}"
RELEASE_AUTHOR="{{.author}}"
RELEASE_BODY="{{.body | js}}"
RELEASE_CREATED_AT="{{.createdAt}}"
RELEASE_ID=0
RELEASE_NODEID="{{.id}}"
RELEASE_DRAFT="{{.isDraft}}"
RELEASE_PRERELEASE="{{.isPrerelease}}"
RELEASE_NAME="{{.name}}"
RELEASE_PUBLISHED_AT="{{.publishedAt}}"
RELEASE_TAG_NAME="{{.tagName}}"
RELEASE_TARBALL_URL="{{.tarballUrl}}"
RELEASE_TARGET_COMMITISH="{{.targetCommitish}}"
RELEASE_UPLOAD_URL="{{.uploadUrl}}"
RELEASE_HTML_URL="{{.url}}"
RELEASE_ZIPBALL_URL="{{.zipballUrl}}"
' | filter_envs > "${ACT_ENV}"
    . "${ACT_ENV}"

RELEASE_ASSETS=$(gh release view "${GHACT_RELEASE_NAME}" --json assets --jq .assets)
}

function release_event_envs() {
    release_envs

    HEAD_OWNER="${OWNER}"
    HEAD_REPO="${REPO}"
    HEAD_USER="${RELEASE_AUTHOR}"
}

function commit_envs() {
    COMMIT_MESSAGE=$(git log "${GHACT_BRANCH:-HEAD}" -1 --pretty=format:"%B%-" | sed -e 's/$/\\n/g' | sed -e 's/\r/\\r/g' | tr -d '\n' | sed -e 's/\\n$//g')
    LOG_FORMAT="{
  \"author\": {
      \"email\": \"%ae\",
      \"name\":\"%an\",
      \"username\":\"%an\"
  },
  \"committer\":{
      \"email\":\"%ce\",
      \"name\":\"%cn\",
      \"username\":\"%cn\"
  },
  \"distinct\":true,
  \"id\":\"%H\",
  \"message\":\"${COMMIT_MESSAGE}\",
  \"timestamp\":\"%cI\",
  \"tree_id\":\"%T\",
  \"url\":\"https://${GITHUB_HOSTNAME}/${OWNER}/${REPO}/commit/%H\"
}"
    COMMITS=$(git log "${GHACT_BRANCH:-HEAD}" -1 --pretty=format:"${LOG_FORMAT}")
}

function remote_commit_detail_json() {
    # shellcheck disable=SC2016
    gh api graphql -F owner="$1" -F repo="$2" -F ref="$3" -F query='
query($owner: String!, $repo: String!, $ref: String!) {
  repository(owner: $owner, name: $repo) { 
    ref(qualifiedName: $ref) {
      target {
        ... on Commit {
          author {
            date
            email
            name
          }
          comments { totalCount }
          committer {
            date
            email
            name
	        }
          message
          signature {
            isValid
            payload
            signature
            state
          }
          tree {
            commitUrl
            oid
          }
          url
        }
      }
    }
  }
}
' --template '
{{$commit := .data.repository.ref.target }}
{
    "author": {
        "date": "{{ $commit.author.date }}",
        "email": "{{ $commit.author.email }}",
        "name": "{{ $commit.author.name }}"
    },
    "comment_count": {{ $commit.comments.totalCount }},
    "committer": {
        "date": "{{ $commit.committer.date }}",
        "email": "{{ $commit.committer.email }}",
        "name": "{{ $commit.committer.name }}"
    },
    "message": "{{ $commit.message | js }}",
    "tree": {
        "sha": "{{ $commit.tree.oid }}",
        "url": "{{ $commit.tree.commitUrl }}"
    },
    "url": "{{ $commit.comments.url }}"
    {{ if $commit.signature }}
    , "verification": {
        "payload": "{{ $commit.signature.payload | js }}",
        "reason": "{{ $commit.signature.state }}",
        "signature": "{{ $commit.signature.signature | js }}",
        "verified": {{ $commit.signature.isValid }}
    }
    {{ end }}
}
'
}

function local_commit_detail_json() {
    COMMIT_MESSAGE=$(git log "$1" -1 --pretty=format:"%B%-" | sed -e 's/$/\\\\n/g' | tr -d '\n' | sed -e 's/\\\\n$//g')
    LOG_FORMAT="{
    \"author\": {
        \"date\": \"%aI\",
        \"email\": \"%ae\",
        \"name\": \"%an\"
    },
    \"comment_count\": 0,
    \"committer\": {
        \"date\": \"%cI\",
        \"email\": \"%ce\",
        \"name\": \"%cn\"
    },
    \"message\": \"${COMMIT_MESSAGE}\",
    \"tree\": {
        \"sha\": \"${BEFORE}\",
        \"url\": \"https://${GITHUB_HOSTNAME}/${OWNER}/${REPO}/commit/${BEFORE}\"
    },
    \"url\": \"https://${GITHUB_HOSTNAME}/${OWNER}/${REPO}/commit/${HEAD}\"
}"
    git log "$1" -1 --pretty=format:"${LOG_FORMAT}"
}

# owner, repo, head, head_branch
function commit_detail_json() {
    TARGET_REMOTE_BRANCH=$(git branch --remote --points-at "$3" | grep -v ' ->' | head -1)
    if [ -n "${TARGET_REMOTE_BRANCH}" ]; then
        REMOTE_LIST=()
        while IFS='' read -r line; do REMOTE_LIST+=("$line"); done < <(git remote)
        TARGET_BRANCH="${TARGET_REMOTE_BRANCH##* }"
        for remote in "${REMOTE_LIST[@]}"; do
            TARGET_BRANCH="${TARGET_BRANCH#"${remote}/"}"
        done
        remote_commit_detail_json "$1" "$2" "${TARGET_BRANCH}"
    else
        local_commit_detail_json "$4"
    fi
}

function get_branch_or_tag_name() {
    git symbolic-ref --short "$1" 2>/dev/null || git name-rev --name-only --no-undefined --tags "$1" 2>/dev/null || git name-rev --name-only "$1"
}


function evnet_envs() {
    if [[ "${EVENT_NAME}" =~ ^pull_request.* ]]; then
        pull_request_event_envs
        return
    fi
    if [[ "${EVENT_NAME}" =~ ^issue.* ]]; then
        issue_event_envs
        return
    fi
    if [[ "${EVENT_NAME}" =~ ^discussion.* ]]; then
        discussion_event_envs
        return
    fi
    if [ "${EVENT_NAME}" == "milestone" ]; then
        milestone_event_envs
        return
    fi
    if [ "${EVENT_NAME}" == "release" ]; then
        release_event_envs
        return
    fi

    if [ "${EVENT_NAME}" == "push" ] || [ "${EVENT_NAME}" == "check_suite" ]; then
        commit_envs
    fi
    if [ "${EVENT_NAME}" == "label" ]; then
        label_event_envs
    fi
    if [ "${EVENT_NAME}" == "branch_protection_rule" ]; then
        branch_protection_rule_envs "${OWNER}" "${REPO}"
    fi
    if [[ "${EVENT_NAME}" =~ ^check.* ]]; then
        check_envs
    fi
    if [ "${EVENT_NAME}" == "registry_package" ]; then
        package_envs "${OWNER}" "${REPO}"
    fi

    if [ "${EVENT_NAME}" == "workflow_dispatch" ]; then
        WORKFLOWS_FILES=()
        while IFS='' read -r line; do WORKFLOWS_FILES+=("$line"); done < <(ls "${WORKFLOWS_PATH}")
        WORKFLOWS_FILES_REGEXP=$(IFS=\|; echo "${WORKFLOWS_FILES[*]}")
        WORKFLOW_YAML=$(act workflow_dispatch --list | grep "${ACT_JOB:-workflow_dispatch}" | grep -oE "(${WORKFLOWS_FILES_REGEXP})" | head -1)
    fi

    HEAD_BRANCH="${GHACT_BRANCH:-}"
    if [ -z "${HEAD_BRANCH}" ]; then
        HEAD_BRANCH=$(get_branch_or_tag_name HEAD)
    fi
    HEAD=$(git rev-parse "${HEAD_BRANCH}")
    HEAD_REF=$(git rev-parse --symbolic-full-name "${HEAD_BRANCH}")
    BEFORE=$(git rev-parse "${HEAD}^")
    HEAD_OWNER="${OWNER}"
    HEAD_REPO="${REPO}"
    HEAD_USER="$(git log "${HEAD_BRANCH}" -1 --pretty=format:%an)"

    if [ "${EVENT_NAME}" == "status" ]; then
        COMMIT_DETAIL_JSON=$(commit_detail_json "${OWNER}" "${REPO}" "${HEAD}" "${HEAD_BRANCH}")
    fi
}

function create_event_json() {
    EVENT_FILE_PATH="$1"
    if [ -f "${SCRIPT_DIR}/templates/${EVENT_NAME}.json" ]; then

        # common
        OWNER=$(gh repo view --json owner --jq .owner.login)
        REPO=$(gh repo view --json name --jq .name)

        evnet_envs

        # head
        repo_envs "${HEAD_OWNER}/${HEAD_REPO}" "HEAD"

        HEAD_OWNER_JSON=$(user_json "${HEAD_OWNER}")
        HEAD_USER_JSON=$(user_json "${HEAD_USER}")
        if [[ ! "${HEAD_USER_JSON}" =~ .*login.* ]]; then
            HEAD_USER_JSON="${HEAD_OWNER_JSON}"
        fi
        HEAD_REPO_JSON=$(repo_json "${HEAD_OWNER}" "${HEAD_REPO}" "${HEAD_OWNER_JSON}")

        if [[ "${EVENT_NAME}" =~ ^pull_request.* ]]; then
            if [[ "${EVENT_NAME}" =~ .*review.* ]]; then
                # pull_rquest_json
                PULL_REQUEST_JSON=$(parts_json pull_request.min)
            else
                # pull_rquest_json
                PULL_REQUEST_JSON=$(parts_json pull_request)
            fi
        fi
        if [[ "${EVENT_NAME}" =~ ^issue.* ]]; then
            ISSUE_JSON=$(issue_json "${GHACT_ISSUE_NUMBER}")
        fi
        if [[ "${EVENT_NAME}" =~ ^discussion.* ]]; then
            DISCUSSION_JSON=$(parts_json discussion)
        fi
 
        TEMPLATE=$(sed -e 's/"/\\"/g' "${SCRIPT_DIR}/templates/${EVENT_NAME}.json")
        eval "echo -E \"${TEMPLATE}\"" | sed -e 's/"null"/null/g' > "${EVENT_FILE_PATH}"
    else
        echo "{}" > "${EVENT_FILE_PATH}"
    fi
}

function parse_hosts_yaml_token() {
    GITHUB_TOKEN=$(grep -A3 -e "${GITHUB_HOSTNAME}" < "$1" | grep -e oauth_token | cut -d: -f2 | xargs echo)
    ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GITHUB_TOKEN}")
}

function hosts_yaml_token() {
    if [[ -n "${GH_CONFIG_DIR+x}" ]]; then
        if [ -f "${GH_CONFIG_DIR}/hosts.yml" ]; then
            parse_hosts_yaml_token "${GH_CONFIG_DIR}/hosts.yml"
            return
        fi
    fi
    if [[ -n "${XDG_CONFIG_HOME+x}" ]]; then
        if [ -f "${XDG_CONFIG_HOME}/gh/hosts.yml" ]; then
            parse_hosts_yaml_token "${XDG_CONFIG_HOME}/gh/hosts.yml"
            return
        fi
    fi
    if [[ -n "${AppData+x}" ]]; then
        if [ -f "${AppData}/GitHub CLI/hosts.yml" ]; then
            parse_hosts_yaml_token "${AppData}/GitHub CLI/hosts.yml"
            return
        fi
    fi
    if [ -f "${HOME}/.config/gh/hosts.yml" ]; then
        parse_hosts_yaml_token "${HOME}/.config/gh/hosts.yml"
        return
    fi
}

function stop_act_container() {
    # stop job containers
    # echo stop act containers..
    # FIXME: split job_name and workflow name with include whitespace
    # act "$@" "${ACT_OPTIONS[@]}" --list --dryrun | tail -n +2 \
    #     | grep "${ACT_JOB:- }" \
    #     | awk '$1 ~ /^[0-9]+$/ {printf "act-%s-%s\n", $4, $3}' \
    #     | sed -e 's/ /-/g' \
    #     | xargs -I{} docker stop {}
    true
}

function rm_act_container() {
    if "${ACT_DRYRUN}"; then
        echo "(dryrun) rm act containers.."
        docker ps -a | grep -o "\sact-.*$"
        echo "(dryrun) rm act volume.."
        docker volume ls | grep -o "\sact-.*$"
    else
        echo stop act containers..
        docker ps | grep -o "\sact-.*$" | xargs -I{} docker stop {} && \
        echo rm act containers.. && \
        docker ps -a | grep -o "\sact-.*$" | xargs -I{} docker container rm {}
        echo rm act volume.. && \
        docker volume ls | grep -o "\sact-.*$" | xargs -I{} docker volume rm {}
    fi
}

function act_int_action() {
    true
}
function act_post_action() {
    true
}

TEMPFILE_DIR=
function tempdir() {
    if [ -z "${TEMPFILE_DIR}" ] || [ ! -d "${TEMPFILE_DIR}" ]; then
        TEMPFILE_DIR=$(mktemp -d gh-act.XXXXXX)
        trap 'rm -rf "${TEMPFILE_DIR}"' EXIT
    fi
}

function main() {

    # trap act_int_action INT
    
    DATE_NOW=$(date +"%Y-%m-%dT%H:%M:%S%z")
    DATE_UTC_NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    declare -a ACT_OPTIONS
    if "${AUTO_GITHUB_TOKEN}"; then
        if [ -n "${GITHUB_TOKEN:-}" ]; then
            ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GITHUB_TOKEN}")
        else
            if [ "${GITHUB_HOSTNAME}" == "github.com" ] && [ -n "${GH_TOKEN:-}" ]; then
                ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GH_TOKEN}")
            else
                if [ "${GITHUB_HOSTNAME}" != "github.com" ] && [ -n "${GH_ENTERPRISE_TOKEN:-}" ]; then
                    ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GH_ENTERPRISE_TOKEN}")
                else
                    hosts_yaml_token
                fi
            fi
        fi
    fi

    if [ -z "${ACT_DEFAULT_BRANCH}" ]; then
        ACT_DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)
        ACT_OPTIONS+=(--defaultbranch "${ACT_DEFAULT_BRANCH}")
    fi

    if "${CREATE_EVENT_JSON}"; then
        if [ ! -f "${EVENT_PATH}" ]; then
           tempdir
            if [ -z "${EVENT_PATH}" ]; then
                EVENT_PATH="${TEMPFILE_DIR}/event.json"
                ACT_OPTIONS+=(--eventpath "${EVENT_PATH}")
            fi

            create_event_json "${EVENT_PATH}"
        fi
    fi

    if [ -z "${ACT_ARTIFACT_SERVER_PATH}" ]; then
        tempdir
        TEMP_ARTIFACT_DIR="${TEMPFILE_DIR}/artifact"
        mkdir -p "${TEMP_ARTIFACT_DIR}"
        ACT_OPTIONS+=(--artifact-server-path "${TEMP_ARTIFACT_DIR}")
    fi

    act "$@" "${ACT_OPTIONS[@]}" && act_post_action
}

if [ "${EVENT_NAME}" == "prune" ]; then
    rm_act_container || true
else
    main "$@"
fi
