#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" &>/dev/null && pwd -P)

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    EVENT_NAME=
    EVENT_PATH=
    GITHUB_HOSTNAME='github.com'

    while :; do
        case "${1-}" in
        -a| --actor ) shift ;;
        --artifact-server-path ) shift ;;
        --artifact-server-port ) shift ;;
        --container-architecture ) shift ;;
        --container-cap-add ) shift ;;
        --container-cap-drop ) shift ;;
        --container-daemon-socket ) shift ;;
        --defaultbranch ) shift ;;
        -C| --directory ) shift ;;
        --env ) shift ;;
        --env-file ) shift ;;
        -e| --eventpath )
            EVENT_PATH="${2-}"
            shift ;;
        --github-instance )
            GITHUB_HOSTNAME="${2-}"
            shift ;;
        -j| --job ) shift ;;
        -P| --platform ) shift ;;
        --remote-name ) shift ;;
        --replace-ghe-action-token-with-github-com ) shift ;;
        --replace-ghe-action-with-github-com ) shift ;;
        -s| --secret ) shift ;;
        --secret-file ) shift ;;
        --userns ) shift ;;
        -W| --workflows ) shift ;;
        -?*) ;;
        ?*)
            if [ -z "${EVENT_NAME}" ]; then
                EVENT_NAME="$1"
            fi
            ;;
        *) break ;;
        esac
        shift
    done

    if [ "${GITHUB_HOSTNAME}" = "github.com" ]; then
        GITHUB_API="api.github.com"
    else
        GITHUB_API="${GITHUB_HOSTNAME}/api/v3"
    fi
    if [ -z "${EVENT_NAME}" ]; then
        EVENT_NAME="push"
    fi
    return 0
}

parse_params "$@"

function user_json {
    TEMPLATE=$(cat "${SCRIPT_DIR}/templates/parts/user.json" | sed -e 's/"/\\"/g')
    USERNAME=$1
    eval "echo -e \"${TEMPLATE}\""
}

function repo_json {
    TEMPLATE=$(cat "${SCRIPT_DIR}/templates/parts/repo.json" | sed -e 's/"/\\"/g')

    OWNER="$1"
    REPO="$2"
    REPOSITORY="$1/$2"

    VISIBILITY=public
    if [ "${REPO_IS_PRIVATE}" = "true" ]; then
        VISIBILITY=private
    fi

    OWNER_JSON="$3"

    eval "echo -e \"${TEMPLATE}\""
}

function pr_env {
    ACT_ENV="${TEMPFILE_DIR}/.pr.env"
    gh pr view --json \
        additions,baseRefName,closedAt,comments,commits,createdAt,deletions,files,headRefName,headRepositoryOwner,headRepository,id,isDraft,maintainerCanModify,mergedAt,mergedBy,milestone,number,reviews,state,updatedAt,url \
        --template '
PR_ADDITIONS="{{.additions}}"
BASE_REF="{{.baseRefName}}"
PR_CLOSED_AT="{{.closedAt}}"
PR_COMMENTS="{{ len .comments}}"
PR_COMMITS="{{ len .commits}}"
PR_CREATED_AT="{{.createdAt}}"
PR_DELETIONS="{{.deletions}}"
PR_CHANGED_FILES="{{ len .files}}"
HEAD_REF="{{.headRefName}}"
HEAD_OWNER="{{.headRepositoryOwner.login}}"
HEAD_REPO="{{.headRepository.name}}"
PR_IS_DRAFT="{{.isDraft}}"
PR_NODE_ID="{{.id}}"
PR_MAINTAINER_CAN_MODIFY="{{.maintainerCanModify}}"
PR_MERGED_AT="{{.mergedAt}}"
PR_MERGED_BY="{{.mergedBy}}"
PR_MILESTONE="{{.milestone}}"
PR_NUMBER="{{.number}}"
PR_REVIEWS="{{ len .reviews}}"
PR_STATE="{{.state}}"
PR_UPDATED_AT="{{.updatedAt}}"
HTML_HREF="{{.url}}"
' | sed -e '/^$/d' -e 's/<no value>/null/g' > "${ACT_ENV}"
    . "${ACT_ENV}"

}

function repo_env {
    REPOSITORY="$1"
    PREFIX="$2"
    ACT_ENV="${TEMPFILE_DIR}/.repo.env"
    gh repo view "${REPOSITORY}" --json \
        createdAt,defaultBranchRef,deleteBranchOnMerge,diskUsage,forkCount,hasIssuesEnabled,hasProjectsEnabled,hasWikiEnabled,homepageUrl,id,isArchived,isFork,isPrivate,issues,isTemplate,licenseInfo,mergeCommitAllowed,mirrorUrl,primaryLanguage,pullRequests,pushedAt,rebaseMergeAllowed,squashMergeAllowed,sshUrl,stargazerCount,updatedAt,url,watchers \
        --template '
REPO_CREATED_AT="{{.createdAt}}"
REPO_DEFAULT_BRANCH_REF="{{.defaultBranchRef.name}}"
REPO_DELETE_BRANCH_ON_MERGE="{{.deleteBranchOnMerge}}"
REPO_DISK_USAGE="{{.diskUsage}}"
REPO_FORK_COUNT="{{.forkCount}}"
REPO_HAS_ISSUES_ENABLED="{{.hasIssuesEnabled}}"
REPO_HAS_PROJECTS_ENABLED="{{.hasProjectsEnabled}}"
REPO_HAS_WIKI_ENABLED="{{.hasWikiEnabled}}"
REPO_HOMEPAGE_URL="{{if .homepageUrl}}{{.homepageUrl}}{{else}}null{{end}}"
REPO_IS_ARCHIVED="{{.isArchived}}"
REPO_IS_FORK="{{.isFork}}"
REPO_IS_PRIVATE="{{.isPrivate}}"
REPO_ISSUES_TOTAL_COUNT="{{.issues.totalCount}}"
REPO_IS_TEMPLATE="{{.isTemplate}}"
REPO_LICENSE_INFO_KEY="{{.licenseInfo.key}}"
REPO_LICENSE_INFO_NAME="{{.licenseInfo.name}}"
REPO_MERGE_COMMIT_ALLOWED="{{.mergeCommitAllowed}}"
REPO_MIRROR_URL="{{if .mirrorUrl}}{{.mirrorUrl}}{{else}}null{{end}}"
REPO_NODE_ID="{{.id}}"
REPO_PRIMARY_LANGUAGE="{{if .primaryLanguage}}{{.primaryLanguage.name}}{{else}}null{{end}}"
REPO_PULL_REQUESTS_TOTAL_COUNT="{{.pullRequests.totalCount}}"
REPO_PUSHED_AT="{{.pushedAt}}"
REPO_REBASE_MERGE_ALLOWED="{{.rebaseMergeAllowed}}"
REPO_SQUASH_MERGE_ALLOWED="{{.squashMergeAllowed}}"
REPO_SSH_URL="{{.sshUrl}}"
REPO_STARGAZER_COUNT="{{.stargazerCount}}"
REPO_UPDATED_AT="{{.updatedAt}}"
REPO_URL="{{.url}}"
REPO_WATCHERS_TOTAL_COUNT="{{.watchers.totalCount}}"
' | sed -e '/^$/d' -e 's/<no value>/null/g' > "${ACT_ENV}"
    . "${ACT_ENV}"
    sed -e "s/^/${PREFIX}_/g" < "${ACT_ENV}" > "${ACT_ENV}.${PREFIX}"
    . "${ACT_ENV}.${PREFIX}"
}

function create_event_json() {
    EVENT_FILE_PATH="$1"
    if [ -f "${SCRIPT_DIR}/templates/${EVENT_NAME}.json" ]; then

        # common
        OWNER=$(gh repo view --json owner --jq .owner.login)
        REPO=$(gh repo view --json name --jq .name)

        if [[ "${EVENT_NAME}" =~ ^pull_request.* ]]; then
            pr_env
            HEAD=$(gh pr view --json commits --jq .commits[].oid | tail -1)
            BEFORE=$(gh pr view --json commits --jq .commits[].oid | tail -2 | head -1)

            # base
            repo_env "${OWNER}/${REPO}" "BASE"
            BASE_USER_JSON=$(user_json "${OWNER}")
            BASE_REPO_JSON=$(repo_json "${OWNER}" "${REPO}" "${BASE_USER_JSON}")
            BASE_SHA=$(gh api --hostname ${GITHUB_HOSTNAME} --method GET -H "Accept: application/vnd.github.v3+json" /repos/${OWNER}/${REPO}/git/refs/heads/${BASE_REF} --jq .object.sha)
        else
            if [ "${EVENT_NAME}" == "push" ]; then
                COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B%-" | sed -e 's/$/\\\\n/g' | tr -d '\n' | sed -e 's/\\\\n$//g')
                COMMITS=$(git log -1 --pretty=format:"{%n \"author\": {%n  \"email\": \"%ae\",%n  \"name\":\"%an\",%n  \"username\":\"%an\"%n },%n \"committer\":{%n  \"email\":\"%ce\",%n  \"name\":\"%cn\",%n  \"username\":\"%cn\"%n },%n \"distinct\":true,%n \"id\":\"%H\",%n \"message\":\"${COMMIT_MESSAGE}\",%n \"timestamp\":\"%cI\",%n \"tree_id\":\"%T\",%n \"url\":\"https://${GITHUB_HOSTNAME}/${OWNER}/${REPO}/commit/%H\"%n}")
            fi
            HEAD=$(git rev-parse HEAD)
            BEFORE=$(git rev-parse HEAD^)
            HEAD_OWNER="${OWNER}"
            HEAD_REPO="${REPO}"
        fi

        # head
        repo_env "${HEAD_OWNER}/${HEAD_REPO}" "HEAD"

        HEAD_USER_JSON=$(user_json "${HEAD_OWNER}")
        HEAD_REPO_JSON=$(repo_json "${HEAD_OWNER}" "${HEAD_REPO}" "${HEAD_USER_JSON}")

        TEMPLATE=$(cat "${SCRIPT_DIR}/templates/${EVENT_NAME}.json" | sed -e 's/"/\\"/g')
        eval "echo -e \"${TEMPLATE}\"" | sed -e 's/"null"/null/g' > "${EVENT_FILE_PATH}"
    else
        echo "{}" > "${EVENT_FILE_PATH}"
    fi
}


if [ ! -f "${EVENT_PATH}" ]; then
    TEMPFILE_DIR=$(mktemp -d gh-act.XXXXXX)
    trap "rm -rf ${TEMPFILE_DIR}" EXIT

    if [ -z "${EVENT_PATH}" ]; then
        EVENT_PATH="${TEMPFILE_DIR}/event.json"
    fi

    create_event_json "${EVENT_PATH}"
    # cat "${EVENT_PATH}"
    act "$@" --eventpath "${EVENT_PATH}"
else
    act "$@"
fi
