#!/usr/bin/env bash
set -euxo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" &>/dev/null && pwd -P)

GH_ACT_VERSION=0.1

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    EVENT_NAME=
    EVENT_PATH=
    GITHUB_HOSTNAME='github.com'
    AUTO_GITHUB_TOKEN=${GHACT_AUTO_GITHUB_TOKEN:-true}
    ACT_JOB=
    WORKFLOWS_PATH=.github/workflows

    while :; do
        case "${1-}" in
        -a| --actor ) shift ;;
        --artifact-server-path ) shift ;;
        --artifact-server-port ) shift ;;
        --container-architecture ) shift ;;
        --container-cap-add ) shift ;;
        --container-cap-drop ) shift ;;
        --container-daemon-socket ) shift ;;
        --defaultbranch ) shift ;;
        -C| --directory ) shift ;;
        --env ) shift ;;
        --env-file ) shift ;;
        -e| --eventpath )
            EVENT_PATH="${2-}"
            shift ;;
        --github-instance )
            GITHUB_HOSTNAME="${2-}"
            shift ;;
        -j| --job )
            ACT_JOB="${2-}"
            shift
            ;;
        -P| --platform ) shift ;;
        --remote-name ) shift ;;
        --replace-ghe-action-token-with-github-com ) shift ;;
        --replace-ghe-action-with-github-com ) shift ;;
        -s| --secret )
            if [[ "${2-}" =~ GITHUB_TOKEN ]]; then
                AUTO_GITHUB_TOKEN=false
            fi
            shift
            ;;
        --secret-file ) shift ;;
        --userns ) shift ;;
        -W| --workflows )
            WORKFLOWS_PATH="${2-}"
            shift
            ;;
        --version )
            echo "gh-act version ${GH_ACT_VERSION}"
            ;;
        -?*) ;;
        ?*)
            if [ -z "${EVENT_NAME}" ]; then
                EVENT_NAME="$1"
            fi
            ;;
        *) break ;;
        esac
        shift
    done

    if [ "${GITHUB_HOSTNAME}" = "github.com" ]; then
        GITHUB_API="api.github.com"
    else
        GITHUB_API="${GITHUB_HOSTNAME}/api/v3"
    fi
    if [ -z "${EVENT_NAME}" ]; then
        EVENT_NAME="push"
    fi
    return 0
}

parse_params "$@"

function parts_json {
    TEMPLATE=$(sed -e 's/"/\\"/g' "${SCRIPT_DIR}/templates/parts/$1.json")
    eval "echo -E \"${TEMPLATE}\""

}

function filter_env {
    sed -e '/^$/d' \
        -e 's/<no value>/null/g' \
        -e "s/\\\\'/'/g" \
        -e 's/\\u000D/\\r/g' \
        -e 's/\\u000A/\\n/g' \
        -e 's/\\u0026/\&/g' \
        -e 's/\\u003C/</g' \
        -e 's/\\u003D/=/g' \
        -e 's/\\u003E/>/g' \
        -e 's/\\/\\\\/g' \
        -e 's/\\"/\\\\\"/g'
}

function is_valid_user {
    gh api --hostname "${GITHUB_HOSTNAME}" -H "Accept: application/vnd.github.v3+json" "/users/$1" >/dev/null 2>/dev/null && :
    return $?
}

function user_json {
    # shellcheck disable=SC2016,SC2086
    USER_JSON_TEMPLATE='{
    "avatar_url": "{{.avatar_url}}",
    "events_url": "{{.events_url}}",
    "followers_url": "{{.followers_url}}",
    "following_url": "{{.following_url}}",
    "gists_url": "{{.gists_url}}",
    "gravatar_id": "{{.gravatar_id}}",
    "html_url": "{{.html_url}}",
    "id": {{.id}},
    "login": "{{.login}}",
    "node_id": "{{.node_id}}",
    "organizations_url": "{{.organizations_url}}",
    "received_events_url": "{{.received_events_url}}",
    "repos_url": "{{.repos_url}}",
    "site_admin": {{.site_admin}},
    "starred_url": "{{.starred_url}}",
    "subscriptions_url": "{{.subscriptions_url}}",
    "type": "{{.type}}",
    "url": "{{.url}}"
}'
    if is_valid_user "${1}"; then
        gh api --hostname "${GITHUB_HOSTNAME}" -H "Accept: application/vnd.github.v3+json" \
            "/users/$1" --template "${USER_JSON_TEMPLATE}" 2>/dev/null
    else
        gh api --hostname "${GITHUB_HOSTNAME}" -H "Accept: application/vnd.github.v3+json" \
            "/user" --template "${USER_JSON_TEMPLATE}" 2>/dev/null
    fi
}

function issue_json {
    ISSUE_NUMBER=$1
    parts_json issue
}

function repo_json {
    OWNER="$1"
    REPO="$2"
    REPOSITORY="$1/$2"

    VISIBILITY=public
    if [ "${REPO_IS_PRIVATE}" = "true" ]; then
        VISIBILITY=private
    fi

    OWNER_JSON="$3"

    parts_json repo
}

function pr_env {
    ACT_ENV="${TEMPFILE_DIR}/.pr.env"
    # shellcheck disable=SC2016,SC2086
    gh pr view ${1:-} --json \
        additions,baseRefName,body,closedAt,comments,commits,createdAt,deletions,files,headRefName,headRepositoryOwner,headRepository,id,isDraft,maintainerCanModify,mergedAt,mergedBy,milestone,number,reviews,state,title,updatedAt,url \
        --template '
PR_ADDITIONS="{{.additions}}"
BASE_REF="{{.baseRefName}}"
PR_BODY="{{.body | js}}"
PR_CLOSED_AT="{{.closedAt}}"
PR_COMMENTS="{{ len .comments}}"
PR_COMMITS="{{ len .commits}}"
PR_CREATED_AT="{{.createdAt}}"
PR_DELETIONS="{{.deletions}}"
PR_CHANGED_FILES="{{ len .files}}"
HEAD_REF="{{.headRefName}}"
HEAD_OWNER="{{.headRepositoryOwner.login}}"
HEAD_REPO="{{.headRepository.name}}"
PR_IS_DRAFT="{{.isDraft}}"
PR_NODE_ID="{{.id}}"
PR_MAINTAINER_CAN_MODIFY="{{.maintainerCanModify}}"
PR_MERGED_AT="{{.mergedAt}}"
PR_MERGED_BY="{{.mergedBy}}"
PR_MILESTONE="{{.milestone}}"
PR_NUMBER="{{.number}}"
PR_POTENTIAL_MERGE_COMMIT="{{.potentialMergeCommit.oid}}"
PR_REVIEWS="{{ len .reviews}}"
PR_STATE="{{.state}}"
PR_TITLE="{{.title | js}}"
PR_UPDATED_AT="{{.updatedAt}}"
PR_URL="{{.url}}"
' | filter_env > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function pr_review_env {
    # FIXME: PR_REVIEW_ID
    ACT_ENV="${TEMPFILE_DIR}/.pr_review.env"
    # shellcheck disable=SC2016,SC2086
    gh pr view ${1:-} --json \
        reviews \
        --template '
{{$last := 0}}
{{range $index, $element := .reviews}}{{$last = $index}}{{end}}
{{$last_review := index .reviews $last}}
PR_REVIEW_ID=0
PR_REVIEW_USER="{{$last_review.author.login}}"
PR_REVIEW_BODY="{{$last_review.body | js}}"
PR_REVIEW_AUTHOR_ASSOCIATION="{{$last_review.authorAssociation}}"
PR_REVIEW_SUBMITTED_AT="{{$last_review.submittedAt}}"
PR_REVIEW_STATE="{{$last_review.state}}"
' | filter_env > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function issue_env {
    ACT_ENV="${TEMPFILE_DIR}/.issue.env"
    # shellcheck disable=SC2016
    gh issue view "$1" --json \
        author,assignees,body,closedAt,comments,createdAt,id,reactionGroups,state,title,updatedAt,url \
        --template '
ISSUE_AUTHOR="{{.author.login}}"
ISSUE_ASSIGNEE="{{if (len .assignees)}}{{(index .assignees 0).login}}{{end}}"
ISSUE_ASSIGNEES="{{range $index, $element := .assignees}}{{$element.login -}} {{end}}"
ISSUE_BODY="{{.body | js}}"
ISSUE_CLOSED_AT="{{if .closedAt}}{{.closedAt}}{{else}}null{{end}}"
ISSUE_COMMENTS="{{ len .comments}}"
ISSUE_CREATED_AT="{{.createdAt}}"
ISSUE_NODE_ID="{{.id}}"
ISSUE_STATE="{{.state}}"
ISSUE_TITLE="{{.title}}"
ISSUE_UPDATED_AT="{{.updatedAt}}"
ISSUE_URL="{{.url}}"
{{range $index, $element := .reactionGroups}}ISSUE_REACTION_{{$element.content}}_COUNT={{println $element.users.totalCount}}{{end}}
ISSUE_REACTION_TOTAL_COUNT=$((0{{range $index, $element := .reactionGroups}}+{{$element.users.totalCount}}{{end}}))
' | filter_env > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function issue_comment_env {
    ACT_ENV="${TEMPFILE_DIR}/.issue.comment.env"
    # shellcheck disable=SC2016
    gh issue view "$1" --json \
        comments \
        --template '
{{$comment := index .comments 0}}
ISSUE_COMMENT_ID=0
ISSUE_COMMENT_AUTHOR="{{$comment.author.login}}"
ISSUE_COMMENT_AUTHOR_ASSOCIATION="{{$comment.authorAssociation}}"
ISSUE_COMMENT_BODY="{{$comment.body | js}}"
ISSUE_COMMENT_CREATED_AT="{{$comment.createdAt}}"
ISSUE_COMMENT_UPDATED_AT="{{$comment.createdAt}}"
{{range $index, $element := $comment.reactionGroups}}ISSUE_COMMENT_REACTION_{{$element.content}}_COUNT={{println $element.users.totalCount}}{{end}}
ISSUE_COMMENT_REACTION_TOTAL_COUNT=$((0{{range $index, $element := $comment.reactionGroups}}+{{$element.users.totalCount}}{{end}}))
' | filter_env > "${ACT_ENV}"
    . "${ACT_ENV}"
}

function repo_env {
    REPOSITORY="$1"
    PREFIX="$2"
    ACT_ENV="${TEMPFILE_DIR}/.repo.env"
    # shellcheck disable=SC2016
    gh repo view "${REPOSITORY}" --json \
        createdAt,defaultBranchRef,deleteBranchOnMerge,description,diskUsage,forkCount,hasIssuesEnabled,hasProjectsEnabled,hasWikiEnabled,homepageUrl,id,isArchived,isFork,isPrivate,issues,isTemplate,licenseInfo,mergeCommitAllowed,mirrorUrl,primaryLanguage,pullRequests,pushedAt,rebaseMergeAllowed,repositoryTopics,squashMergeAllowed,sshUrl,stargazerCount,updatedAt,url,watchers \
        --template '
REPO_CREATED_AT="{{.createdAt}}"
REPO_DEFAULT_BRANCH_REF="{{.defaultBranchRef.name}}"
REPO_DELETE_BRANCH_ON_MERGE="{{.deleteBranchOnMerge}}"
REPO_DESCRIPTION="{{.description | js}}"
REPO_DISK_USAGE="{{.diskUsage}}"
REPO_FORK_COUNT="{{.forkCount}}"
REPO_HAS_ISSUES_ENABLED="{{.hasIssuesEnabled}}"
REPO_HAS_PROJECTS_ENABLED="{{.hasProjectsEnabled}}"
REPO_HAS_WIKI_ENABLED="{{.hasWikiEnabled}}"
REPO_HOMEPAGE_URL="{{if .homepageUrl}}{{.homepageUrl}}{{else}}null{{end}}"
REPO_IS_ARCHIVED="{{.isArchived}}"
REPO_IS_FORK="{{.isFork}}"
REPO_IS_PRIVATE="{{.isPrivate}}"
REPO_ISSUES_TOTAL_COUNT="{{.issues.totalCount}}"
REPO_IS_TEMPLATE="{{.isTemplate}}"
REPO_LICENSE_INFO_KEY="{{.licenseInfo.key}}"
REPO_LICENSE_INFO_NAME="{{.licenseInfo.name}}"
REPO_MERGE_COMMIT_ALLOWED="{{.mergeCommitAllowed}}"
REPO_MIRROR_URL="{{if .mirrorUrl}}{{.mirrorUrl}}{{else}}null{{end}}"
REPO_NODE_ID="{{.id}}"
REPO_PRIMARY_LANGUAGE="{{if .primaryLanguage}}{{.primaryLanguage.name}}{{else}}null{{end}}"
REPO_PULL_REQUESTS_TOTAL_COUNT="{{.pullRequests.totalCount}}"
REPO_PUSHED_AT="{{.pushedAt}}"
REPO_REBASE_MERGE_ALLOWED="{{.rebaseMergeAllowed}}"
REPO_REPOSITORY_TOPICS="{{if .repositoryTopics}}{{range $index, $element := .repositoryTopics}}{{$element.name}} {{end -}}{{else}}null{{end}}"
REPO_SQUASH_MERGE_ALLOWED="{{.squashMergeAllowed}}"
REPO_SSH_URL="{{.sshUrl}}"
REPO_STARGAZER_COUNT="{{.stargazerCount}}"
REPO_UPDATED_AT="{{.updatedAt}}"
REPO_URL="{{.url}}"
REPO_WATCHERS_TOTAL_COUNT="{{.watchers.totalCount}}"
' | filter_env > "${ACT_ENV}"
    . "${ACT_ENV}"
    sed -e "s/^/${PREFIX}_/g" < "${ACT_ENV}" > "${ACT_ENV}.${PREFIX}"
    . "${ACT_ENV}.${PREFIX}"
}


function pull_request_event_envs() {
    # configurable vars
    # PULL_REQUEST_SPEC
    # PULL_REQUEST_NUMBER
    PULL_REQUEST_SPEC="${PULL_REQUEST_SPEC:-}"
    if [ -n "${PULL_REQUEST_NUMBER:-}" ]; then
        PULL_REQUEST_SPEC="${PULL_REQUEST_NUMBER}"
    fi

    pr_env "${PULL_REQUEST_SPEC}"
    # shellcheck disable=SC2086
    HEAD=$(gh pr view ${PULL_REQUEST_SPEC} --json commits --jq .commits[].oid | tail -1)
    # shellcheck disable=SC2086
    HEAD_USER=$(gh pr view ${PULL_REQUEST_SPEC} --json commits --jq .commits[].authors[].login | tail -1)
    # shellcheck disable=SC2086
    BEFORE=$(gh pr view ${PULL_REQUEST_SPEC} --json commits --jq .commits[].oid | tail -2 | head -1)

    # base
    repo_env "${OWNER}/${REPO}" "BASE"
    BASE_USER_JSON=$(user_json "${OWNER}")
    BASE_REPO_JSON=$(repo_json "${OWNER}" "${REPO}" "${BASE_USER_JSON}")
    BASE_SHA=$(gh api --hostname "${GITHUB_HOSTNAME}" --method GET -H "Accept: application/vnd.github.v3+json" "/repos/${OWNER}/${REPO}/git/refs/heads/${BASE_REF}" --jq .object.sha)

    if [[ "${EVENT_NAME}" =~ .*review.* ]]; then
        if [ "${PR_REVIEWS}" == "0" ]; then
            PR_REVIEW_ID=0
            PR_REVIEW_USER="${HEAD_USER}"
            PR_REVIEW_BODY="gh-act review"
            PR_REVIEW_AUTHOR_ASSOCIATION="OWNER"
            PR_REVIEW_SUBMITTED_AT="${PR_UPDATED_AT}"
            PR_REVIEW_STATE="COMMENTED"
        else
            pr_review_env "${PULL_REQUEST_SPEC}"
        fi
        PR_REVIEW_USER_JSON=$(user_json "${PR_REVIEW_USER}")
    fi
}


function issue_event_envs() {
    # configurable vars
    # ISSUE_NUMBER
    if [ -z "${ISSUE_NUMBER:-}" ]; then
        ISSUE_NUMBER=$(gh issue list --json number --jq .[].number | head -1)
    fi

    issue_env "${ISSUE_NUMBER}"

    ISSUE_LABELS=$(gh issue view "${ISSUE_NUMBER}" --json labels)
    ISSUE_LABELS=${ISSUE_LABELS#{}
    ISSUE_LABELS=${ISSUE_LABELS%\}}

    if [ -n "${ISSUE_ASSIGNEE}" ]; then
        ASSIGNEE_USER_JSON=$(user_json "${ISSUE_ASSIGNEE}")
    fi
    if [ -n "${ISSUE_ASSIGNEES}" ]; then
        for assignee in ${ISSUE_ASSIGNEES}; do
            if [ -n "${ASSIGNEES_JSON:-}" ]; then
                ASSIGNEES_JSON+=","
            fi
            ASSIGNEES_JSON+=$(user_json "${assignee}")
        done
    fi

    if [[ "${EVENT_NAME}" =~ .*comment.* ]]; then
        if [ "${ISSUE_COMMENTS}" == "0" ]; then
            ISSUE_COMMENT_ID=0
            ISSUE_COMMENT_AUTHOR="${ISSUE_AUTHOR}"
            ISSUE_COMMENT_AUTHOR_ASSOCIATION="OWNER"
            ISSUE_COMMENT_BODY="gh-act issue comment body"
            ISSUE_COMMENT_CREATED_AT="${ISSUE_CREATED_AT}"
            ISSUE_COMMENT_UPDATED_AT="${ISSUE_UPDATED_AT}"
        else
            issue_comment_env "${ISSUE_NUMBER}"
        fi
        ISSUE_COMMENT_USER_JSON=$(user_json "${ISSUE_COMMENT_AUTHOR}")
    fi
    HEAD_OWNER="${OWNER}"
    HEAD_REPO="${REPO}"
    HEAD_USER="${ISSUE_AUTHOR}"
}


function label_event_envs() {
    LABEL_COUNT=$(gh label list --json name --jq length)
    if [ "${LABEL_COUNT}" == "0" ]; then
        LABEL_COLOR="d73a4a"
        LABEL_DESCRIPTION="gh-act label"
        LABEL_NODE_ID=""
        LABEL_IS_DEFAULT="false"
        LABEL_NAME="gh act"
        LABEL_URL="https://${GITHUB_API}/repos/${OWNER}/${REPO}/labels/gh%20act"
    else
        ACT_ENV="${TEMPFILE_DIR}/.label.env"
        # shellcheck disable=SC2016
        gh label list --json \
            color,description,id,isDefault,name,url \
            --template '
{{$last := 0}}
{{range $index, $element := .}}{{$last = $index}}{{end}}
{{$label := index . $last}}
LABEL_COLOR="{{$label.color}}"
LABEL_DESCRIPTION="{{$label.description | js}}"
LABEL_NODE_ID="{{$label.id}}"
LABEL_IS_DEFAULT="{{$label.isDefault}}"
LABEL_NAME="{{$label.name}}"
LABEL_URL="{{$label.url}}"
' | filter_env > "${ACT_ENV}"
        . "${ACT_ENV}"
    fi
}


function create_event_json() {
    EVENT_FILE_PATH="$1"
    if [ -f "${SCRIPT_DIR}/templates/${EVENT_NAME}.json" ]; then

        # common
        OWNER=$(gh repo view --json owner --jq .owner.login)
        REPO=$(gh repo view --json name --jq .name)

        if [[ "${EVENT_NAME}" =~ ^pull_request.* ]]; then
            pull_request_event_envs
        else
            if [[ "${EVENT_NAME}" =~ ^issue.* ]]; then
                issue_event_envs
            else
                if [ "${EVENT_NAME}" == "push" ]; then
                    COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B%-" | sed -e 's/$/\\\\n/g' | tr -d '\n' | sed -e 's/\\\\n$//g')
                    COMMITS=$(git log -1 --pretty=format:"{%n \"author\": {%n  \"email\": \"%ae\",%n  \"name\":\"%an\",%n  \"username\":\"%an\"%n },%n \"committer\":{%n  \"email\":\"%ce\",%n  \"name\":\"%cn\",%n  \"username\":\"%cn\"%n },%n \"distinct\":true,%n \"id\":\"%H\",%n \"message\":\"${COMMIT_MESSAGE}\",%n \"timestamp\":\"%cI\",%n \"tree_id\":\"%T\",%n \"url\":\"https://${GITHUB_HOSTNAME}/${OWNER}/${REPO}/commit/%H\"%n}")
                fi
                if [ "${EVENT_NAME}" == "label" ]; then
                    label_event_envs
                fi
                if [ "${EVENT_NAME}" == "workflow_dispatch" ]; then
                    WORKFLOWS_FILES=()
                    while IFS='' read -r line; do WORKFLOWS_FILES+=("$line"); done < <(ls "${WORKFLOWS_PATH}")
                    WORKFLOWS_FILES_REGEXP=$(IFS=\|; echo "${WORKFLOWS_FILES[*]}")
                    WORKFLOW_YAML=$(act workflow_dispatch --list | grep "${ACT_JOB:-workflow_dispatch}" | grep -oE "(${WORKFLOWS_FILES_REGEXP})" | head -1)
                fi
                HEAD=$(git rev-parse HEAD)
                BEFORE=$(git rev-parse HEAD^)
                HEAD_OWNER="${OWNER}"
                HEAD_REPO="${REPO}"
                HEAD_USER="$(git log -1 --pretty=format:%an)"
            fi
        fi

        # head
        repo_env "${HEAD_OWNER}/${HEAD_REPO}" "HEAD"

        HEAD_OWNER_JSON=$(user_json "${HEAD_OWNER}")
        HEAD_USER_JSON=$(user_json "${HEAD_USER}")
        HEAD_REPO_JSON=$(repo_json "${HEAD_OWNER}" "${HEAD_REPO}" "${HEAD_OWNER_JSON}")

        if [[ "${EVENT_NAME}" =~ ^pull_request.* ]]; then
            if [[ "${EVENT_NAME}" =~ .*review.* ]]; then
                # pull_rquest_json
                PULL_REQUEST_JSON=$(parts_json pull_request.min)
            else
                # pull_rquest_json
                PULL_REQUEST_JSON=$(parts_json pull_request)
            fi
        else
            if [[ "${EVENT_NAME}" =~ ^issue.* ]]; then
                ISSUE_JSON=$(issue_json "${ISSUE_NUMBER}")
            fi
        fi

        TEMPLATE=$(sed -e 's/"/\\"/g' "${SCRIPT_DIR}/templates/${EVENT_NAME}.json")
        eval "echo -E \"${TEMPLATE}\"" | sed -e 's/"null"/null/g' > "${EVENT_FILE_PATH}"
    else
        echo "{}" > "${EVENT_FILE_PATH}"
    fi
}

declare -a ACT_OPTIONS
if "${AUTO_GITHUB_TOKEN}"; then
    if [ -n "${GITHUB_TOKEN:-}" ]; then
        ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GITHUB_TOKEN}")
    else
        if [ -n "${GH_TOKEN:-}" ]; then
            ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GH_TOKEN}")
        else
            if [ -f "${HOME}/.config/gh/hosts.yml" ]; then
                GITHUB_TOKEN=$(grep -A3 -e "${GITHUB_HOSTNAME}" < "${HOME}/.config/gh/hosts.yml" | grep -e oauth_token | cut -d: -f2 | xargs echo)
                ACT_OPTIONS+=(-s "GITHUB_TOKEN=${GITHUB_TOKEN}")
            fi
        fi
    fi
fi

if [ ! -f "${EVENT_PATH}" ]; then
    TEMPFILE_DIR=$(mktemp -d gh-act.XXXXXX)
    trap 'rm -rf "${TEMPFILE_DIR}"' EXIT

    if [ -z "${EVENT_PATH}" ]; then
        EVENT_PATH="${TEMPFILE_DIR}/event.json"
        ACT_OPTIONS+=(--eventpath "${EVENT_PATH}")
    fi

    create_event_json "${EVENT_PATH}"
    # cat "${EVENT_PATH}"
fi

act "$@" "${ACT_OPTIONS[@]}"
